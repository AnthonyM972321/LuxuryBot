// LuxuryBot Ultimate - Application principale

// Global state
let state = {
    properties: [],
    guides: {},
    currentProperty: null,
    currentLanguage: 'fr',
    map: null,
    markers: {},
    firebaseConnected: false,
    aiGeneratedCount: 0
};

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    try {
        // Load saved data
        loadFromLocalStorage();
        updateDashboard();
        initializeMap();
        
        // Start Firebase simulation
        simulateFirebaseSync();
        
        // Update weather
        updateWeather();
        
        // Update weather every 30 minutes
        setInterval(updateWeather, 30 * 60 * 1000);
        
        // Check if first visit
        const welcomeModal = document.getElementById('welcome-modal');
        if (!localStorage.getItem('luxurybot_visited')) {
            localStorage.setItem('luxurybot_visited', 'true');
            if (welcomeModal) {
                welcomeModal.classList.add('active');
            }
        } else {
            if (welcomeModal) {
                welcomeModal.classList.remove('active');
            }
        }
        
        // Initialize signature pad when modal opens
        document.addEventListener('click', function(e) {
            if (e.target.matches('[onclick*="showPropertyCheckin"]')) {
                setTimeout(initSignaturePad, 100);
            }
        });
        
        // Check saved integrations on load
        checkSavedIntegrations();
        
    } catch (error) {
        console.error('Initialization error:', error);
    }
});

// Check and display saved integrations
function checkSavedIntegrations() {
    // Check OpenAI
    if (localStorage.getItem('openai_api_key')) {
        const btns = document.querySelectorAll('button[onclick="configureOpenAI()"]');
        btns.forEach(btn => {
            btn.textContent = 'Connect√©';
            btn.classList.remove('btn-secondary');
            btn.classList.add('btn-success');
        });
    }
    
    // Check Twilio
    if (localStorage.getItem('twilio_config')) {
        const btns = document.querySelectorAll('button[onclick="configureTwilio()"]');
        btns.forEach(btn => {
            btn.textContent = 'Connect√©';
            btn.classList.remove('btn-secondary');
            btn.classList.add('btn-success');
        });
    }
    
    // Check VAPI
    if (localStorage.getItem('vapi_api_key')) {
        const btns = document.querySelectorAll('button[onclick="configureVAPI()"]');
        btns.forEach(btn => {
            btn.textContent = 'Connect√©';
            btn.classList.remove('btn-secondary');
            btn.classList.add('btn-success');
        });
    }
    
    // Check SendGrid
    if (localStorage.getItem('sendgrid_api_key')) {
        const btns = document.querySelectorAll('button[onclick="configureSendGrid()"]');
        btns.forEach(btn => {
            btn.textContent = 'Connect√©';
            btn.classList.remove('btn-secondary');
            btn.classList.add('btn-success');
        });
    }
    
    // Check Stripe
    if (localStorage.getItem('stripe_api_key')) {
        const btns = document.querySelectorAll('button[onclick="configureStripe()"]');
        btns.forEach(btn => {
            btn.textContent = 'Connect√©';
            btn.classList.remove('btn-secondary');
            btn.classList.add('btn-success');
        });
    }
}

// Navigation
function showSection(sectionId) {
    // Hide all sections
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    
    // Remove active class from nav items
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Show selected section
    const targetSection = document.getElementById(sectionId);
    if (targetSection) {
        targetSection.classList.add('active');
    }
    
    // Add active class to nav item
    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach(item => {
        if (item.textContent.includes(getSectionName(sectionId))) {
            item.classList.add('active');
        }
    });
    
    // Special handling for sections
    if (sectionId === 'guides') {
        updatePropertySelect();
    } else if (sectionId === 'settings') {
        // Check integrations when showing settings
        setTimeout(checkSavedIntegrations, 100);
    }
}

function getSectionName(sectionId) {
    const names = {
        'dashboard': 'Tableau de bord',
        'properties': 'Mes Logements',
        'guides': 'Guides',
        'messages': 'Messages',
        'analytics': 'Analytiques',
        'ai-config': 'Config IA',
        'settings': 'Param√®tres'
    };
    return names[sectionId] || '';
}

// Dark Mode
function toggleTheme() {
    document.body.classList.toggle('dark-mode');
    const icon = document.getElementById('theme-icon');
    icon.textContent = document.body.classList.contains('dark-mode') ? '‚òÄÔ∏è' : 'üåô';
    localStorage.setItem('luxurybot_theme', document.body.classList.contains('dark-mode') ? 'dark' : 'light');
}

// Load theme preference
if (localStorage.getItem('luxurybot_theme') === 'dark') {
    document.body.classList.add('dark-mode');
    const themeIcon = document.getElementById('theme-icon');
    if (themeIcon) themeIcon.textContent = '‚òÄÔ∏è';
}

// Welcome Modal
function closeWelcomeModal() {
    const modal = document.getElementById('welcome-modal');
    if (modal) {
        modal.classList.remove('active');
    }
}

function startDemo() {
    closeWelcomeModal();
    // Start demo import
    const importInput = document.getElementById('import-url');
    if (importInput) {
        importInput.value = 'https://www.airbnb.fr/rooms/12345678';
        importFromURL();
    }
}

// Property Management
function openPropertyModal() {
    const modal = document.getElementById('property-modal');
    if (modal) {
        modal.classList.add('active');
    }
}

function closePropertyModal() {
    const modal = document.getElementById('property-modal');
    if (modal) {
        modal.classList.remove('active');
        const form = document.getElementById('property-form');
        if (form) form.reset();
    }
}

function showImportModal() {
    showToast('ai', 'Import Airbnb', 'Collez l\'URL de votre annonce dans la barre d\'import du tableau de bord');
    showSection('dashboard');
    const importInput = document.getElementById('import-url');
    if (importInput) {
        importInput.focus();
    }
}

// Form submission with validation
const propertyForm = document.getElementById('property-form');
if (propertyForm) {
    propertyForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const property = {
            id: Date.now(),
            name: document.getElementById('property-name')?.value || 'Sans nom',
            type: document.getElementById('property-type')?.value || 'apartment',
            address: document.getElementById('property-address')?.value || 'Non sp√©cifi√©',
            bedrooms: parseInt(document.getElementById('property-bedrooms')?.value || 1),
            bathrooms: parseInt(document.getElementById('property-bathrooms')?.value || 1),
            capacity: parseInt(document.getElementById('property-capacity')?.value || 2),
            status: 'available',
            createdAt: new Date().toISOString()
        };
        
        state.properties.push(property);
        saveToLocalStorage();
        updateDashboard();
        renderProperties();
        closePropertyModal();
        showToast('success', 'Succ√®s', 'Logement ajout√© avec succ√®s');
    });
}

// Import from URL
async function importFromURL() {
    const url = document.getElementById('import-url').value;
    if (!url) {
        showToast('error', 'Erreur', 'Veuillez entrer une URL');
        return;
    }
    
    // Show AI loading
    document.getElementById('ai-loading').classList.add('active');
    
    // Simulate AI processing
    const statuses = [
        'Connexion √† la plateforme...',
        'Extraction des donn√©es...',
        'Analyse des photos...',
        'G√©n√©ration des descriptions...',
        'Finalisation...'
    ];
    
    for (let i = 0; i < statuses.length; i++) {
        document.getElementById('ai-substatus').textContent = statuses[i];
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // Create imported property
    const property = {
        id: Date.now(),
        name: 'Appartement Vue Mer - C√¥te d\'Azur',
        type: 'apartment',
        address: 'Nice, France',
        bedrooms: 2,
        bathrooms: 1,
        capacity: 4,
        status: 'available',
        imported: true,
        platform: 'Airbnb',
        createdAt: new Date().toISOString()
    };
    
    state.properties.push(property);
    state.aiGeneratedCount++;
    saveToLocalStorage();
    updateDashboard();
    renderProperties();
    
    // Hide loading and clear input
    document.getElementById('ai-loading').classList.remove('active');
    document.getElementById('import-url').value = '';
    
    showToast('ai', 'Import r√©ussi', 'Votre logement a √©t√© import√© avec succ√®s depuis Airbnb');
    showSection('properties');
}

// Render properties
function renderProperties() {
    const grid = document.getElementById('properties-grid');
    if (!grid) return;
    
    if (state.properties.length === 0) {
        grid.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üè†</div>
                <div class="empty-state-title">Aucun logement configur√©</div>
                <div class="empty-state-message">
                    Importez depuis Airbnb ou cr√©ez manuellement
                </div>
                <button class="btn btn-ai" onclick="showImportModal()">
                    üéØ Importer depuis Airbnb
                </button>
            </div>
        `;
        return;
    }
    
    grid.innerHTML = state.properties.map(property => `
        <div class="property-card" onclick="selectProperty(${property.id})">
            <div class="property-image">
                ${property.imported ? '<div class="property-badges"><span class="property-badge">Import√©</span></div>' : ''}
                üè†
            </div>
            <div class="property-content">
                <div class="property-header">
                    <div>
                        <div class="property-title">${property.name}</div>
                        <div class="property-type">${property.type}</div>
                    </div>
                    <div class="property-status status-${property.status}">
                        ${property.status === 'available' ? 'Disponible' : 'Occup√©'}
                    </div>
                </div>
                <div class="property-details">
                    <div class="property-detail">
                        <div class="property-detail-value">${property.bedrooms}</div>
                        <div class="property-detail-label">Chambres</div>
                    </div>
                    <div class="property-detail">
                        <div class="property-detail-value">${property.bathrooms}</div>
                        <div class="property-detail-label">SdB</div>
                    </div>
                    <div class="property-detail">
                        <div class="property-detail-value">${property.capacity}</div>
                        <div class="property-detail-label">Personnes</div>
                    </div>
                </div>
                <div style="display: flex; gap: 0.5rem; margin-top: 1rem;">
                    <button class="btn btn-sm btn-primary" onclick="event.stopPropagation(); showPropertyReviews(${property.id})">‚≠ê Avis</button>
                    <button class="btn btn-sm btn-info" onclick="event.stopPropagation(); showPropertyCheckin(${property.id})">‚úÖ Check-in</button>
                    <span class="sync-indicator synced">‚òÅÔ∏è Synchronis√©</span>
                </div>
            </div>
        </div>
    `).join('');
}

// Select property
function selectProperty(propertyId) {
    state.currentProperty = state.properties.find(p => p.id === propertyId);
    showSection('guides');
    document.getElementById('guide-property-select').value = propertyId;
    loadPropertyGuide();
}

// Update property select
function updatePropertySelect() {
    const select = document.getElementById('guide-property-select');
    if (!select) return;
    
    select.innerHTML = '<option value="">-- Choisissez un logement --</option>';
    
    state.properties.forEach(property => {
        const option = document.createElement('option');
        option.value = property.id;
        option.textContent = property.name;
        select.appendChild(option);
    });
}

// Load property guide
function loadPropertyGuide() {
    const propertyId = document.getElementById('guide-property-select').value;
    if (!propertyId) {
        document.getElementById('guide-editor').style.display = 'none';
        return;
    }
    
    const property = state.properties.find(p => p.id === parseInt(propertyId));
    if (!property) return;
    
    state.currentProperty = property;
    document.getElementById('guide-editor').style.display = 'block';
    document.getElementById('guide-property-name').textContent = property.name;
    
    // Load guide content if exists
    if (state.guides[propertyId] && state.guides[propertyId][state.currentLanguage]) {
        const guide = state.guides[propertyId][state.currentLanguage];
        document.getElementById('guide-welcome').value = guide.welcome || '';
        document.getElementById('guide-access').value = guide.access || '';
        document.getElementById('guide-equipment').value = guide.equipment || '';
        document.getElementById('guide-neighborhood').value = guide.neighborhood || '';
        document.getElementById('guide-checkout').value = guide.checkout || '';
        document.getElementById('guide-emergency').value = guide.emergency || translations[state.currentLanguage].emergencyNumbers;
    } else {
        // Set default values
        document.getElementById('guide-welcome').value = translations[state.currentLanguage].defaultWelcome.replace('{property_name}', property.name);
        document.getElementById('guide-access').value = '';
        document.getElementById('guide-equipment').value = '';
        document.getElementById('guide-neighborhood').value = '';
        document.getElementById('guide-checkout').value = translations[state.currentLanguage].defaultCheckout;
        document.getElementById('guide-emergency').value = translations[state.currentLanguage].emergencyNumbers;
    }
    
    // Update map
    initializeMap();
}

// Language switching
function switchLanguage(lang) {
    state.currentLanguage = lang;
    
    // Update UI
    document.querySelectorAll('.language-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // Update language-specific texts
    const trans = translations[lang] || translations.fr;
    document.getElementById('guide-welcome-text').textContent = trans.welcome;
    document.getElementById('guide-subtitle-text').textContent = trans.welcomeGuide;
    document.getElementById('section-welcome').textContent = trans.welcome;
    document.getElementById('section-access').textContent = trans.access;
    document.getElementById('section-equipment').textContent = trans.equipment;
    document.getElementById('section-neighborhood').textContent = trans.neighborhood;
    document.getElementById('section-checkout').textContent = trans.checkout;
    document.getElementById('section-emergency').textContent = trans.emergency;
    document.getElementById('section-map').textContent = trans.map;
    
    // Load guide for current language
    if (state.currentProperty) {
        loadPropertyGuide();
    }
}

// AI Content Generation
async function generateAIContent(section) {
    if (!state.currentProperty) {
        showToast('error', 'Erreur', 'Veuillez s√©lectionner un logement');
        return;
    }
    
    showToast('ai', 'IA en action', `G√©n√©ration du contenu pour ${section}...`);
    
    // Simulate AI generation
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const aiContent = {
        welcome: `Bienvenue dans notre magnifique ${state.currentProperty.type} "${state.currentProperty.name}" ! 

Nous sommes ravis de vous accueillir et avons tout pr√©par√© pour que votre s√©jour soit inoubliable. Ce guide contient toutes les informations n√©cessaires pour profiter pleinement de votre s√©jour.

N'h√©sitez pas √† nous contacter si vous avez besoin de quoi que ce soit. Nous sommes l√† pour vous aider !`,
        
        access: `üìç Adresse : ${state.currentProperty.address}

üîë R√©cup√©ration des cl√©s :
- Une bo√Æte √† cl√©s s√©curis√©e est situ√©e √† gauche de la porte d'entr√©e
- Code : [sera envoy√© 24h avant votre arriv√©e]
- Les cl√©s sont √† l'int√©rieur dans une pochette bleue

üöó Parking :
- Place de parking priv√©e disponible
- Num√©ro de place : A12
- Acc√®s par badge inclus avec les cl√©s

üö™ Acc√®s au b√¢timent :
- Code porte : [sera envoy√© avec le code de la bo√Æte √† cl√©s]
- Appartement au 3√®me √©tage
- Ascenseur disponible`,
        
        equipment: `üõèÔ∏è Chambres (${state.currentProperty.bedrooms}) :
- Literie haut de gamme
- Oreillers suppl√©mentaires dans les placards
- Couvertures dans l'armoire

üöø Salle de bain (${state.currentProperty.bathrooms}) :
- Serviettes fournies
- S√®che-cheveux
- Gel douche et shampoing
- Papier toilette

üç≥ Cuisine √©quip√©e :
- R√©frig√©rateur/cong√©lateur
- Four et micro-ondes
- Lave-vaisselle
- Machine √† caf√© Nespresso
- Bouilloire et grille-pain
- Ustensiles complets

üì∂ WiFi :
- R√©seau : ${state.currentProperty.name}_WiFi
- Mot de passe : [voir carte sur le frigo]

üß∫ Autres √©quipements :
- Lave-linge
- Fer et planche √† repasser
- Aspirateur
- Climatisation`,
        
        neighborhood: `üèñÔ∏è Plages √† proximit√© :
- Plage de la Promenade : 5 min √† pied
- Plage priv√©e "Blue Beach" : 10 min

üõí Commerces :
- Supermarch√© Carrefour : 2 min √† pied
- Boulangerie "Au Bon Pain" : face √† l'immeuble
- Pharmacie : 3 min √† pied

üçΩÔ∏è Restaurants recommand√©s :
- "La Petite Maison" - Cuisine m√©diterran√©enne (5 min)
- "Chez Antoine" - Sp√©cialit√©s ni√ßoises (7 min)
- "Sushi Zen" - Japonais (10 min)

üöá Transports :
- Arr√™t de bus : 2 min (lignes 12, 23, 52)
- Station de tram : 8 min
- Gare SNCF : 15 min en bus

üèõÔ∏è √Ä visiter :
- Vieux Nice : 15 min √† pied
- Promenade des Anglais : 5 min
- Mus√©e d'Art Moderne : 20 min
- Ch√¢teau de Nice : 25 min`,
        
        checkout: `üìÖ Heure de d√©part : 11h00

‚úÖ Check-list avant de partir :
‚òê Retirer tous vos effets personnels
‚òê V√©rifier les placards et tiroirs
‚òê Nettoyer la vaisselle utilis√©e
‚òê Jeter les poubelles (conteneurs dans la cour)
‚òê Fermer toutes les fen√™tres
‚òê √âteindre tous les appareils √©lectriques
‚òê R√©gler le chauffage/clim sur 20¬∞C
‚òê Remettre les cl√©s dans la bo√Æte

üóëÔ∏è Tri des d√©chets :
- Bac jaune : recyclables
- Bac vert : ordures m√©nag√®res
- Bac bleu : verre

üíù Merci de :
- Laisser le logement dans l'√©tat o√π vous l'avez trouv√©
- Signaler tout probl√®me ou casse
- Laisser un avis sur la plateforme

Nous esp√©rons que vous avez pass√© un excellent s√©jour !`
    };
    
    // Update the textarea
    const textarea = document.getElementById(`guide-${section}`);
    if (textarea && aiContent[section]) {
        textarea.value = aiContent[section];
        state.aiGeneratedCount++;
        updateDashboard();
        showToast('success', 'Contenu g√©n√©r√©', 'Le contenu a √©t√© g√©n√©r√© avec succ√®s par l\'IA');
    }
}

// Save guide
function saveGuide() {
    if (!state.currentProperty) {
        showToast('error', 'Erreur', 'Veuillez s√©lectionner un logement');
        return;
    }
    
    const guide = {
        welcome: document.getElementById('guide-welcome').value,
        access: document.getElementById('guide-access').value,
        equipment: document.getElementById('guide-equipment').value,
        neighborhood: document.getElementById('guide-neighborhood').value,
        checkout: document.getElementById('guide-checkout').value,
        emergency: document.getElementById('guide-emergency').value
    };
    
    if (!state.guides[state.currentProperty.id]) {
        state.guides[state.currentProperty.id] = {};
    }
    
    state.guides[state.currentProperty.id][state.currentLanguage] = guide;
    saveToLocalStorage();
    updateDashboard();
    showToast('success', 'Guide sauvegard√©', 'Le guide a √©t√© sauvegard√© avec succ√®s');
}

// Toast notifications
function showToast(type, title, message) {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.innerHTML = `
        <span class="toast-icon">${getToastIcon(type)}</span>
        <div class="toast-content">
            <div class="toast-title">${title}</div>
            <div class="toast-message">${message}</div>
        </div>
        <span class="toast-close" onclick="this.parentElement.remove()">‚úï</span>
    `;
    
    document.getElementById('toast-container').appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 5000);
}

function getToastIcon(type) {
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è',
        ai: 'ü§ñ'
    };
    return icons[type] || '‚ÑπÔ∏è';
}

// Local storage
function saveToLocalStorage() {
    localStorage.setItem('luxurybot_state', JSON.stringify(state));
}

function loadFromLocalStorage() {
    const saved = localStorage.getItem('luxurybot_state');
    if (saved) {
        const loadedState = JSON.parse(saved);
        state = { ...state, ...loadedState };
    }
}

// Update dashboard
function updateDashboard() {
    const elements = {
        'total-properties': state.properties.length,
        'total-guides': Object.keys(state.guides).length,
        'ai-generated': state.aiGeneratedCount,
        'upcoming-checkins': 3
    };
    
    for (const [id, value] of Object.entries(elements)) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }
}

// Initialize map (simplified version)
function initializeMap() {
    const mapEl = document.getElementById('property-map');
    if (mapEl) {
        mapEl.innerHTML = `
            <div style="height: 100%; display: flex; align-items: center; justify-content: center; background: #e2e8f0;">
                <div style="text-align: center;">
                    <span style="font-size: 3rem;">üó∫Ô∏è</span>
                    <p style="margin-top: 1rem; color: #718096;">Carte interactive</p>
                </div>
            </div>
        `;
    }
}

// Firebase simulation
function simulateFirebaseSync() {
    const status = document.getElementById('firebase-status');
    const statusText = document.getElementById('firebase-status-text');
    
    // Check if Firebase is actually connected
    if (typeof firebase !== 'undefined' && window.db) {
        // Firebase is properly initialized
        if (status && statusText) {
            status.classList.remove('disconnected');
            status.classList.add('connected');
            statusText.textContent = 'Connect√©';
        }
    } else {
        // Simulate connection after 3 seconds if Firebase not loaded
        setTimeout(() => {
            if (status && statusText) {
                status.classList.remove('disconnected');
                status.classList.add('connected');
                statusText.textContent = 'Connect√©';
                showToast('success', 'Firebase', 'Connexion √©tablie - Synchronisation activ√©e');
            }
        }, 3000);
    }
}

// Weather update (dummy)
function updateWeather() {
    // Placeholder for weather functionality
}

// Additional helper functions
function createNewGuide() {
    if (state.properties.length === 0) {
        showToast('warning', 'Attention', 'Veuillez d\'abord ajouter un logement');
        showSection('properties');
    } else {
        showToast('info', 'Nouveau guide', 'S√©lectionnez un logement pour cr√©er le guide');
    }
}

function sendPreCheckinMessage() {
    showSection('messages');
    const input = document.getElementById('chat-input');
    if (input) {
        input.value = "Bonjour Marie ! J'esp√®re que vous allez bien. Votre s√©jour approche et je voulais vous confirmer que tout est pr√™t pour votre arriv√©e apr√®s-demain.";
    }
    showToast('ai', 'Message pr√©-rempli', 'Personnalisez et envoyez');
}

// ALL INTEGRATION FUNCTIONS
function connectBooking() {
    showToast('info', 'Booking.com', 'Redirection vers l\'authentification Booking...');
}

function configureOpenAI() {
    const apiKey = prompt('Entrez votre cl√© API OpenAI :');
    if (apiKey) {
        localStorage.setItem('openai_api_key', apiKey);
        showToast('success', 'OpenAI configur√©', 'Votre cl√© API a √©t√© enregistr√©e');
        event.target.textContent = 'Connect√©';
        event.target.classList.remove('btn-secondary');
        event.target.classList.add('btn-success');
    }
}

function configureN8N() {
    showToast('info', 'n8n', 'Configuration des workflows d\'automatisation...');
}

function configureSendGrid() {
    const apiKey = prompt('Entrez votre cl√© API SendGrid :');
    if (apiKey) {
        localStorage.setItem('sendgrid_api_key', apiKey);
        showToast('success', 'SendGrid configur√©', 'Envoi d\'emails activ√©');
        event.target.textContent = 'Connect√©';
        event.target.classList.remove('btn-secondary');
        event.target.classList.add('btn-success');
    }
}

function configureStripe() {
    const apiKey = prompt('Entrez votre cl√© API Stripe :');
    if (apiKey) {
        localStorage.setItem('stripe_api_key', apiKey);
        showToast('success', 'Stripe configur√©', 'Paiements en ligne activ√©s');
        event.target.textContent = 'Connect√©';
        event.target.classList.remove('btn-secondary');
        event.target.classList.add('btn-success');
    }
}

function configureFirebase() {
    showToast('info', 'Firebase', 'Firebase est d√©j√† configur√© et connect√©');
}

// Configuration Twilio
function configureTwilio() {
    const accountSid = prompt('Entrez votre Account SID Twilio :');
    if (accountSid) {
        const authToken = prompt('Entrez votre Auth Token Twilio :');
        if (authToken) {
            const phoneNumber = prompt('Entrez votre num√©ro Twilio (format: +33...) :');
            if (phoneNumber) {
                localStorage.setItem('twilio_config', JSON.stringify({
                    accountSid,
                    authToken,
                    phoneNumber
                }));
                showToast('success', 'Twilio configur√©', 'SMS et appels activ√©s');
                event.target.textContent = 'Connect√©';
                event.target.classList.remove('btn-secondary');
                event.target.classList.add('btn-success');
            }
        }
    }
}

// Configuration VAPI
function configureVAPI() {
    const apiKey = prompt('Entrez votre cl√© API VAPI :');
    if (apiKey) {
        localStorage.setItem('vapi_api_key', apiKey);
        showToast('success', 'VAPI configur√©', 'Assistant vocal activ√©');
        event.target.textContent = 'Connect√©';
        event.target.classList.remove('btn-secondary');
        event.target.classList.add('btn-success');
    }
}

// Fonction pour envoyer un SMS avec Twilio
function sendSMS(phoneNumber, message) {
    const config = JSON.parse(localStorage.getItem('twilio_config') || '{}');
    if (!config.accountSid) {
        showToast('error', 'Erreur', 'Twilio non configur√©');
        return;
    }
    
    // Ici le code pour envoyer le SMS
    showToast('success', 'SMS envoy√©', `Message envoy√© √† ${phoneNumber}`);
}

// Fonction pour l'assistant vocal VAPI
function startVoiceAssistant() {
    const apiKey = localStorage.getItem('vapi_api_key');
    if (!apiKey) {
        showToast('error', 'Erreur', 'VAPI non configur√©');
        return;
    }
    
    // Ici le code pour d√©marrer l'assistant
    showToast('ai', 'Assistant vocal', 'Assistant pr√™t √† r√©pondre aux appels');
}

function previewGuide() {
    showToast('info', 'Aper√ßu', 'Fonctionnalit√© en d√©veloppement');
}

function shareGuide() {
    const shareUrl = `${window.location.origin}${window.location.pathname}?property=${state.currentProperty?.id}&lang=${state.currentLanguage}`;
    
    if (navigator.share) {
        navigator.share({
            title: `Guide ${state.currentProperty?.name}`,
            text: 'Voici le guide d\'accueil pour votre s√©jour',
            url: shareUrl
        });
    } else {
        navigator.clipboard.writeText(shareUrl);
        showToast('success', 'Lien copi√©', 'Le lien a √©t√© copi√© dans le presse-papier');
    }
}

function exportPDF() {
    showToast('info', 'Export PDF', 'Installation de jsPDF requise pour cette fonctionnalit√©');
}

function translateAllGuides() {
    if (!state.currentProperty) {
        showToast('error', 'Erreur', 'Veuillez s√©lectionner un logement');
        return;
    }
    
    showToast('ai', 'Traduction IA', 'Cette fonctionnalit√© n√©cessite une cl√© API OpenAI configur√©e');
    
    const apiKey = localStorage.getItem('openai_api_key');
    if (!apiKey) {
        showToast('warning', 'Configuration requise', 'Veuillez configurer OpenAI dans les param√®tres');
        showSection('settings');
    }
}

function showPropertyReviews(propertyId) {
    showToast('info', 'Avis', 'Module avis en d√©veloppement');
}

function showPropertyCheckin(propertyId) {
    showToast('info', 'Check-in', 'Module check-in digital en d√©veloppement');
}

// Initialize the app
window.addEventListener('load', () => {
    showToast('ai', 'Bienvenue', 'LuxuryBot Ultimate est pr√™t √† transformer votre gestion locative !');
});
