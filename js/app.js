// LuxuryBot Ultimate - Application principale

// Global state
let state = {
    properties: [],
    guides: {},
    currentProperty: null,
    currentLanguage: 'fr',
    currentUser: null,
    map: null,
    markers: {},
    firebaseConnected: false,
    aiGeneratedCount: 0
};

// Wait for Firebase to be ready
window.addEventListener('firebaseReady', function() {
    console.log('üì± Firebase ready event received');
    initializeApp();
});

// Also check on page load in case Firebase is already ready
window.addEventListener('load', function() {
    console.log('üìÑ Page loaded');
    
    // If Firebase is already ready, initialize
    if (window.firebaseReady && window.auth && window.db) {
        console.log('‚úÖ Firebase already ready, initializing app');
        initializeApp();
    } else {
        console.log('‚è≥ Waiting for Firebase...');
    }
});

// Initialize the application
function initializeApp() {
    console.log('üöÄ Initializing LuxuryBot Ultimate...');
    
    // Check if already initialized
    if (window.appInitialized) {
        console.log('‚ö†Ô∏è App already initialized');
        return;
    }
    
    window.appInitialized = true;
    
    // Setup authentication state listener
    if (window.auth) {
        window.auth.onAuthStateChanged((user) => {
            console.log('üîê Auth state changed:', user ? user.email : 'No user');
            
            if (user) {
                // User is signed in
                state.currentUser = user;
                showMainApp();
                loadUserData();
                updateUserProfile();
            } else {
                // User is signed out
                state.currentUser = null;
                showLoginPage();
            }
        });
    } else {
        console.error('‚ùå Auth not available');
        showLoginPage();
    }
    
    // Setup forms
    setupForms();
    
    // Load saved data
    loadFromLocalStorage();
    updateDashboard();
    initializeMap();
    
    // Check saved integrations
    checkSavedIntegrations();
    
    // Load theme preference
    if (localStorage.getItem('luxurybot_theme') === 'dark') {
        document.body.classList.add('dark-mode');
        const themeIcon = document.getElementById('theme-icon');
        if (themeIcon) themeIcon.textContent = '‚òÄÔ∏è';
    }
    
    console.log('‚úÖ App initialization complete');
}

// Setup all forms
function setupForms() {
    // Login form
    const loginForm = document.getElementById('login-form');
    if (loginForm) {
        loginForm.addEventListener('submit', handleLogin);
    }
    
    // Register form
    const registerForm = document.getElementById('register-form');
    if (registerForm) {
        registerForm.addEventListener('submit', handleRegister);
    }
    
    // Property form
    const propertyForm = document.getElementById('property-form');
    if (propertyForm) {
        propertyForm.addEventListener('submit', handlePropertySubmit);
    }
}

// Authentication functions
async function handleLogin(e) {
    e.preventDefault();
    console.log('üîë Login attempt...');
    
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;
    const rememberMe = document.getElementById('remember-me').checked;
    
    if (!window.auth) {
        showToast('error', 'Erreur', 'Service d\'authentification non disponible');
        return;
    }
    
    try {
        const userCredential = await window.auth.signInWithEmailAndPassword(email, password);
        const user = userCredential.user;
        
        console.log('‚úÖ Login successful:', user.email);
        
        if (rememberMe) {
            localStorage.setItem('luxurybot_remember', 'true');
        }
        
        showToast('success', 'Connexion r√©ussie', `Bienvenue ${user.email}`);
        
    } catch (error) {
        console.error('‚ùå Login error:', error);
        let message = 'Erreur de connexion';
        
        switch (error.code) {
            case 'auth/user-not-found':
                message = 'Utilisateur non trouv√©';
                break;
            case 'auth/wrong-password':
                message = 'Mot de passe incorrect';
                break;
            case 'auth/invalid-email':
                message = 'Email invalide';
                break;
            case 'auth/network-request-failed':
                message = 'Erreur r√©seau - V√©rifiez votre connexion';
                break;
            case 'auth/too-many-requests':
                message = 'Trop de tentatives - R√©essayez plus tard';
                break;
        }
        
        showToast('error', 'Erreur', message);
    }
}

async function handleRegister(e) {
    e.preventDefault();
    console.log('üìù Register attempt...');
    
    const name = document.getElementById('register-name').value;
    const email = document.getElementById('register-email').value;
    const password = document.getElementById('register-password').value;
    const confirmPassword = document.getElementById('register-confirm-password').value;
    
    if (!window.auth) {
        showToast('error', 'Erreur', 'Service d\'authentification non disponible');
        return;
    }
    
    if (password !== confirmPassword) {
        showToast('error', 'Erreur', 'Les mots de passe ne correspondent pas');
        return;
    }
    
    if (password.length < 6) {
        showToast('error', 'Erreur', 'Le mot de passe doit contenir au moins 6 caract√®res');
        return;
    }
    
    try {
        const userCredential = await window.auth.createUserWithEmailAndPassword(email, password);
        const user = userCredential.user;
        
        console.log('‚úÖ User created:', user.email);
        
        // Update user profile
        await user.updateProfile({
            displayName: name
        });
        
        // Create user document in Firestore
        if (window.db) {
            await window.db.collection('users').doc(user.uid).set({
                name: name,
                email: email,
                createdAt: firebase.firestore.FieldValue.serverTimestamp()
            });
        }
        
        showToast('success', 'Compte cr√©√©', 'Votre compte a √©t√© cr√©√© avec succ√®s');
        closeRegisterModal();
        
    } catch (error) {
        console.error('‚ùå Register error:', error);
        let message = 'Erreur lors de la cr√©ation du compte';
        
        switch (error.code) {
            case 'auth/email-already-in-use':
                message = 'Cet email est d√©j√† utilis√©';
                break;
            case 'auth/invalid-email':
                message = 'Email invalide';
                break;
            case 'auth/weak-password':
                message = 'Mot de passe trop faible';
                break;
            case 'auth/network-request-failed':
                message = 'Erreur r√©seau - V√©rifiez votre connexion';
                break;
        }
        
        showToast('error', 'Erreur', message);
    }
}

function logout() {
    if (window.auth) {
        window.auth.signOut().then(() => {
            showToast('success', 'D√©connexion', '√Ä bient√¥t !');
            localStorage.removeItem('luxurybot_remember');
            state.currentUser = null;
        }).catch((error) => {
            console.error('‚ùå Logout error:', error);
            showToast('error', 'Erreur', 'Impossible de se d√©connecter');
        });
    }
}

// UI State Management
function showMainApp() {
    console.log('üè† Showing main app...');
    const loginSection = document.getElementById('login');
    const dashboardSection = document.getElementById('dashboard');
    const nav = document.querySelector('.nav');
    const header = document.querySelector('.header');
    const themeToggle = document.querySelector('.theme-toggle');
    const firebaseStatus = document.querySelector('.firebase-status');
    
    if (loginSection) loginSection.classList.remove('active');
    if (dashboardSection) dashboardSection.classList.add('active');
    if (nav) nav.style.display = 'block';
    if (header) header.style.display = 'block';
    if (themeToggle) themeToggle.style.display = 'flex';
    if (firebaseStatus) firebaseStatus.style.display = 'flex';
}

function showLoginPage() {
    console.log('üîê Showing login page...');
    const loginSection = document.getElementById('login');
    if (loginSection) {
        loginSection.classList.add('active');
    }
    
    document.querySelectorAll('.section:not(#login)').forEach(section => {
        section.classList.remove('active');
    });
    
    const nav = document.querySelector('.nav');
    const header = document.querySelector('.header');
    const themeToggle = document.querySelector('.theme-toggle');
    const firebaseStatus = document.querySelector('.firebase-status');
    
    if (nav) nav.style.display = 'none';
    if (header) header.style.display = 'none';
    if (themeToggle) themeToggle.style.display = 'none';
    if (firebaseStatus) firebaseStatus.style.display = 'none';
}

function showRegister() {
    const modal = document.getElementById('register-modal');
    if (modal) {
        modal.classList.add('active');
    }
}

function closeRegisterModal() {
    const modal = document.getElementById('register-modal');
    if (modal) {
        modal.classList.remove('active');
        const form = document.getElementById('register-form');
        if (form) form.reset();
    }
}

function showForgotPassword() {
    const email = document.getElementById('login-email').value;
    if (!email) {
        showToast('error', 'Erreur', 'Veuillez entrer votre email d\'abord');
        return;
    }
    
    if (window.auth) {
        window.auth.sendPasswordResetEmail(email).then(() => {
            showToast('success', 'Email envoy√©', 'V√©rifiez votre bo√Æte mail pour r√©initialiser votre mot de passe');
        }).catch((error) => {
            console.error('‚ùå Password reset error:', error);
            showToast('error', 'Erreur', 'Impossible d\'envoyer l\'email de r√©initialisation');
        });
    }
}

// User Profile Management
async function updateProfile() {
    const user = state.currentUser;
    if (!user) return;
    
    const name = document.getElementById('user-name').value;
    const newPassword = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    
    try {
        // Update display name
        if (name && name !== user.displayName) {
            await user.updateProfile({ displayName: name });
            
            // Update in Firestore
            if (window.db) {
                await window.db.collection('users').doc(user.uid).update({
                    name: name
                });
            }
        }
        
        // Update password
        if (newPassword) {
            if (newPassword !== confirmPassword) {
                showToast('error', 'Erreur', 'Les mots de passe ne correspondent pas');
                return;
            }
            if (newPassword.length < 6) {
                showToast('error', 'Erreur', 'Le mot de passe doit contenir au moins 6 caract√®res');
                return;
            }
            await user.updatePassword(newPassword);
            document.getElementById('new-password').value = '';
            document.getElementById('confirm-password').value = '';
        }
        
        showToast('success', 'Profil mis √† jour', 'Vos informations ont √©t√© sauvegard√©es');
        
    } catch (error) {
        console.error('‚ùå Update profile error:', error);
        showToast('error', 'Erreur', 'Impossible de mettre √† jour le profil');
    }
}

function updateUserProfile() {
    const user = state.currentUser;
    if (user) {
        const nameInput = document.getElementById('user-name');
        const emailInput = document.getElementById('user-email');
        
        if (nameInput) nameInput.value = user.displayName || '';
        if (emailInput) emailInput.value = user.email || '';
    }
}

// Data Management
async function loadUserData() {
    if (!state.currentUser || !window.db) return;
    
    try {
        // Load user properties from Firestore
        const propertiesSnapshot = await window.db.collection('users')
            .doc(state.currentUser.uid)
            .collection('properties')
            .get();
            
        state.properties = [];
        propertiesSnapshot.forEach(doc => {
            state.properties.push({ id: doc.id, ...doc.data() });
        });
        
        // Load guides
        const guidesSnapshot = await window.db.collection('users')
            .doc(state.currentUser.uid)
            .collection('guides')
            .get();
            
        state.guides = {};
        guidesSnapshot.forEach(doc => {
            const data = doc.data();
            if (!state.guides[data.propertyId]) {
                state.guides[data.propertyId] = {};
            }
            state.guides[data.propertyId][data.language] = data.content;
        });
        
        updateDashboard();
        renderProperties();
        
    } catch (error) {
        console.error('‚ùå Error loading user data:', error);
    }
}

// Check saved integrations
function checkSavedIntegrations() {
    const integrations = [
        { key: 'openai_api_key', button: 'configureOpenAI' },
        { key: 'twilio_config', button: 'configureTwilio' },
        { key: 'vapi_api_key', button: 'configureVAPI' },
        { key: 'sendgrid_api_key', button: 'configureSendGrid' },
        { key: 'stripe_api_key', button: 'configureStripe' }
    ];
    
    integrations.forEach(integration => {
        if (localStorage.getItem(integration.key)) {
            const btns = document.querySelectorAll(`button[onclick="${integration.button}()"]`);
            btns.forEach(btn => {
                btn.textContent = 'Connect√©';
                btn.classList.remove('btn-secondary');
                btn.classList.add('btn-success');
            });
        }
    });
}

// Navigation
function showSection(sectionId) {
    // Hide all sections
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    
    // Remove active class from nav items
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Show selected section
    const targetSection = document.getElementById(sectionId);
    if (targetSection) {
        targetSection.classList.add('active');
    }
    
    // Add active class to nav item
    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach(item => {
        if (item.textContent.includes(getSectionName(sectionId))) {
            item.classList.add('active');
        }
    });
    
    // Special handling for sections
    if (sectionId === 'guides') {
        updatePropertySelect();
    } else if (sectionId === 'settings') {
        setTimeout(checkSavedIntegrations, 100);
    }
}

function getSectionName(sectionId) {
    const names = {
        'dashboard': 'Tableau de bord',
        'properties': 'Mes Logements',
        'guides': 'Guides',
        'messages': 'Messages',
        'analytics': 'Analytiques',
        'ai-config': 'Config IA',
        'settings': 'Param√®tres'
    };
    return names[sectionId] || '';
}

// Theme Management
function toggleTheme() {
    document.body.classList.toggle('dark-mode');
    const icon = document.getElementById('theme-icon');
    if (icon) {
        icon.textContent = document.body.classList.contains('dark-mode') ? '‚òÄÔ∏è' : 'üåô';
    }
    localStorage.setItem('luxurybot_theme', document.body.classList.contains('dark-mode') ? 'dark' : 'light');
}

// Modal Management
function closeWelcomeModal() {
    const modal = document.getElementById('welcome-modal');
    if (modal) {
        modal.classList.remove('active');
    }
}

function startDemo() {
    closeWelcomeModal();
    const importInput = document.getElementById('import-url');
    if (importInput) {
        importInput.value = 'https://www.airbnb.fr/rooms/12345678';
        importFromURL();
    }
}

// Property Management
function openPropertyModal() {
    const modal = document.getElementById('property-modal');
    if (modal) {
        modal.classList.add('active');
    }
}

function closePropertyModal() {
    const modal = document.getElementById('property-modal');
    if (modal) {
        modal.classList.remove('active');
        const form = document.getElementById('property-form');
        if (form) form.reset();
    }
}

function showImportModal() {
    showToast('ai', 'Import Airbnb', 'Collez l\'URL de votre annonce dans la barre d\'import du tableau de bord');
    showSection('dashboard');
    const importInput = document.getElementById('import-url');
    if (importInput) {
        importInput.focus();
    }
}

async function handlePropertySubmit(e) {
    e.preventDefault();
    
    const property = {
        name: document.getElementById('property-name')?.value || 'Sans nom',
        type: document.getElementById('property-type')?.value || 'apartment',
        address: document.getElementById('property-address')?.value || 'Non sp√©cifi√©',
        bedrooms: parseInt(document.getElementById('property-bedrooms')?.value || 1),
        bathrooms: parseInt(document.getElementById('property-bathrooms')?.value || 1),
        capacity: parseInt(document.getElementById('property-capacity')?.value || 2),
        status: 'available',
        createdAt: new Date().toISOString()
    };
    
    try {
        if (window.db && state.currentUser) {
            const docRef = await window.db.collection('users')
                .doc(state.currentUser.uid)
                .collection('properties')
                .add(property);
            
            property.id = docRef.id;
        } else {
            property.id = Date.now().toString();
        }
        
        state.properties.push(property);
        saveToLocalStorage();
        updateDashboard();
        renderProperties();
        closePropertyModal();
        showToast('success', 'Succ√®s', 'Logement ajout√© avec succ√®s');
        
    } catch (error) {
        console.error('‚ùå Error adding property:', error);
        showToast('error', 'Erreur', 'Impossible d\'ajouter le logement');
    }
}

async function importFromURL() {
    const url = document.getElementById('import-url').value;
    if (!url) {
        showToast('error', 'Erreur', 'Veuillez entrer une URL');
        return;
    }
    
    const loadingEl = document.getElementById('ai-loading');
    if (loadingEl) loadingEl.classList.add('active');
    
    const statuses = [
        'Connexion √† la plateforme...',
        'Extraction des donn√©es...',
        'Analyse des photos...',
        'G√©n√©ration des descriptions...',
        'Finalisation...'
    ];
    
    for (let i = 0; i < statuses.length; i++) {
        const substatusEl = document.getElementById('ai-substatus');
        if (substatusEl) substatusEl.textContent = statuses[i];
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    const property = {
        name: 'Appartement Vue Mer - C√¥te d\'Azur',
        type: 'apartment',
        address: 'Nice, France',
        bedrooms: 2,
        bathrooms: 1,
        capacity: 4,
        status: 'available',
        imported: true,
        platform: 'Airbnb',
        createdAt: new Date().toISOString()
    };
    
    try {
        if (window.db && state.currentUser) {
            const docRef = await window.db.collection('users')
                .doc(state.currentUser.uid)
                .collection('properties')
                .add(property);
            
            property.id = docRef.id;
        } else {
            property.id = Date.now().toString();
        }
        
        state.properties.push(property);
        state.aiGeneratedCount++;
        saveToLocalStorage();
        updateDashboard();
        renderProperties();
        
    } catch (error) {
        console.error('‚ùå Error importing property:', error);
    }
    
    if (loadingEl) loadingEl.classList.remove('active');
    document.getElementById('import-url').value = '';
    
    showToast('ai', 'Import r√©ussi', 'Votre logement a √©t√© import√© avec succ√®s depuis Airbnb');
    showSection('properties');
}

function renderProperties() {
    const grid = document.getElementById('properties-grid');
    if (!grid) return;
    
    if (state.properties.length === 0) {
        grid.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üè†</div>
                <div class="empty-state-title">Aucun logement configur√©</div>
                <div class="empty-state-message">
                    Importez depuis Airbnb ou cr√©ez manuellement
                </div>
                <button class="btn btn-ai" onclick="showImportModal()">
                    üéØ Importer depuis Airbnb
                </button>
            </div>
        `;
        return;
    }
    
    grid.innerHTML = state.properties.map(property => `
        <div class="property-card" onclick="selectProperty('${property.id}')">
            <div class="property-image">
                ${property.imported ? '<div class="property-badges"><span class="property-badge">Import√©</span></div>' : ''}
                üè†
            </div>
            <div class="property-content">
                <div class="property-header">
                    <div>
                        <div class="property-title">${property.name}</div>
                        <div class="property-type">${property.type}</div>
                    </div>
                    <div class="property-status status-${property.status}">
                        ${property.status === 'available' ? 'Disponible' : 'Occup√©'}
                    </div>
                </div>
                <div class="property-details">
                    <div class="property-detail">
                        <div class="property-detail-value">${property.bedrooms}</div>
                        <div class="property-detail-label">Chambres</div>
                    </div>
                    <div class="property-detail">
                        <div class="property-detail-value">${property.bathrooms}</div>
                        <div class="property-detail-label">SdB</div>
                    </div>
                    <div class="property-detail">
                        <div class="property-detail-value">${property.capacity}</div>
                        <div class="property-detail-label">Personnes</div>
                    </div>
                </div>
                <div style="display: flex; gap: 0.5rem; margin-top: 1rem;">
                    <button class="btn btn-sm btn-primary" onclick="event.stopPropagation(); showPropertyReviews('${property.id}')">‚≠ê Avis</button>
                    <button class="btn btn-sm btn-info" onclick="event.stopPropagation(); showPropertyCheckin('${property.id}')">‚úÖ Check-in</button>
                    <span class="sync-indicator synced">‚òÅÔ∏è Synchronis√©</span>
                </div>
            </div>
        </div>
    `).join('');
}

function selectProperty(propertyId) {
    state.currentProperty = state.properties.find(p => p.id === propertyId);
    showSection('guides');
    const select = document.getElementById('guide-property-select');
    if (select) select.value = propertyId;
    loadPropertyGuide();
}

function updatePropertySelect() {
    const select = document.getElementById('guide-property-select');
    if (!select) return;
    
    select.innerHTML = '<option value="">-- Choisissez un logement --</option>';
    
    state.properties.forEach(property => {
        const option = document.createElement('option');
        option.value = property.id;
        option.textContent = property.name;
        select.appendChild(option);
    });
}

// Guide Management
function loadPropertyGuide() {
    const select = document.getElementById('guide-property-select');
    const propertyId = select ? select.value : null;
    
    if (!propertyId) {
        const editor = document.getElementById('guide-editor');
        if (editor) editor.style.display = 'none';
        return;
    }
    
    const property = state.properties.find(p => p.id === propertyId);
    if (!property) return;
    
    state.currentProperty = property;
    const editor = document.getElementById('guide-editor');
    if (editor) editor.style.display = 'block';
    
    const propertyNameEl = document.getElementById('guide-property-name');
    if (propertyNameEl) propertyNameEl.textContent = property.name;
    
    // Load guide content if exists
    if (state.guides[propertyId] && state.guides[propertyId][state.currentLanguage]) {
        const guide = state.guides[propertyId][state.currentLanguage];
        setGuideField('guide-welcome', guide.welcome);
        setGuideField('guide-access', guide.access);
        setGuideField('guide-equipment', guide.equipment);
        setGuideField('guide-neighborhood', guide.neighborhood);
        setGuideField('guide-checkout', guide.checkout);
        setGuideField('guide-emergency', guide.emergency);
    } else {
        // Set default values
        const trans = window.translations && window.translations[state.currentLanguage] ? 
            window.translations[state.currentLanguage] : 
            { defaultWelcome: '', defaultCheckout: '', emergencyNumbers: '' };
            
        setGuideField('guide-welcome', trans.defaultWelcome?.replace('{property_name}', property.name) || '');
        setGuideField('guide-access', '');
        setGuideField('guide-equipment', '');
        setGuideField('guide-neighborhood', '');
        setGuideField('guide-checkout', trans.defaultCheckout || '');
        setGuideField('guide-emergency', trans.emergencyNumbers || '');
    }
    
    initializeMap();
}

function setGuideField(id, value) {
    const field = document.getElementById(id);
    if (field) field.value = value || '';
}

function switchLanguage(lang) {
    state.currentLanguage = lang;
    
    document.querySelectorAll('.language-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    if (event && event.target) {
        event.target.classList.add('active');
    }
    
    // Update language-specific texts
    if (window.translations && window.translations[lang]) {
        const trans = window.translations[lang];
        updateElementText('guide-welcome-text', trans.welcome);
        updateElementText('guide-subtitle-text', trans.welcomeGuide);
        updateElementText('section-welcome', trans.welcome);
        updateElementText('section-access', trans.access);
        updateElementText('section-equipment', trans.equipment);
        updateElementText('section-neighborhood', trans.neighborhood);
        updateElementText('section-checkout', trans.checkout);
        updateElementText('section-emergency', trans.emergency);
        updateElementText('section-map', trans.map);
    }
    
    if (state.currentProperty) {
        loadPropertyGuide();
    }
}

function updateElementText(id, text) {
    const el = document.getElementById(id);
    if (el && text) el.textContent = text;
}

async function generateAIContent(section) {
    if (!state.currentProperty) {
        showToast('error', 'Erreur', 'Veuillez s√©lectionner un logement');
        return;
    }
    
    showToast('ai', 'IA en action', `G√©n√©ration du contenu pour ${section}...`);
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const aiContent = {
        welcome: `Bienvenue dans notre magnifique ${state.currentProperty.type} "${state.currentProperty.name}" ! 

Nous sommes ravis de vous accueillir et avons tout pr√©par√© pour que votre s√©jour soit inoubliable. Ce guide contient toutes les informations n√©cessaires pour profiter pleinement de votre s√©jour.

N'h√©sitez pas √† nous contacter si vous avez besoin de quoi que ce soit. Nous sommes l√† pour vous aider !`,
        
        access: `üìç Adresse : ${state.currentProperty.address}

üîë R√©cup√©ration des cl√©s :
- Une bo√Æte √† cl√©s s√©curis√©e est situ√©e √† gauche de la porte d'entr√©e
- Code : [sera envoy√© 24h avant votre arriv√©e]
- Les cl√©s sont √† l'int√©rieur dans une pochette bleue

üöó Parking :
- Place de parking priv√©e disponible
- Num√©ro de place : A12
- Acc√®s par badge inclus avec les cl√©s

üö™ Acc√®s au b√¢timent :
- Code porte : [sera envoy√© avec le code de la bo√Æte √† cl√©s]
- Appartement au 3√®me √©tage
- Ascenseur disponible`,
        
        equipment: `üõèÔ∏è Chambres (${state.currentProperty.bedrooms}) :
- Literie haut de gamme
- Oreillers suppl√©mentaires dans les placards
- Couvertures dans l'armoire

üöø Salle de bain (${state.currentProperty.bathrooms}) :
- Serviettes fournies
- S√®che-cheveux
- Gel douche et shampoing
- Papier toilette

üç≥ Cuisine √©quip√©e :
- R√©frig√©rateur/cong√©lateur
- Four et micro-ondes
- Lave-vaisselle
- Machine √† caf√© Nespresso
- Bouilloire et grille-pain
- Ustensiles complets

üì∂ WiFi :
- R√©seau : ${state.currentProperty.name}_WiFi
- Mot de passe : [voir carte sur le frigo]

üß∫ Autres √©quipements :
- Lave-linge
- Fer et planche √† repasser
- Aspirateur
- Climatisation`,
        
        neighborhood: `üèñÔ∏è Plages √† proximit√© :
- Plage de la Promenade : 5 min √† pied
- Plage priv√©e "Blue Beach" : 10 min

üõí Commerces :
- Supermarch√© Carrefour : 2 min √† pied
- Boulangerie "Au Bon Pain" : face √† l'immeuble
- Pharmacie : 3 min √† pied

üçΩÔ∏è Restaurants recommand√©s :
- "La Petite Maison" - Cuisine m√©diterran√©enne (5 min)
- "Chez Antoine" - Sp√©cialit√©s ni√ßoises (7 min)
- "Sushi Zen" - Japonais (10 min)

üöá Transports :
- Arr√™t de bus : 2 min (lignes 12, 23, 52)
- Station de tram : 8 min
- Gare SNCF : 15 min en bus

üèõÔ∏è √Ä visiter :
- Vieux Nice : 15 min √† pied
- Promenade des Anglais : 5 min
- Mus√©e d'Art Moderne : 20 min
- Ch√¢teau de Nice : 25 min`,
        
        checkout: `üìÖ Heure de d√©part : 11h00

‚úÖ Check-list avant de partir :
‚òê Retirer tous vos effets personnels
‚òê V√©rifier les placards et tiroirs
‚òê Nettoyer la vaisselle utilis√©e
‚òê Jeter les poubelles (conteneurs dans la cour)
‚òê Fermer toutes les fen√™tres
‚òê √âteindre tous les appareils √©lectriques
‚òê R√©gler le chauffage/clim sur 20¬∞C
‚òê Remettre les cl√©s dans la bo√Æte

üóëÔ∏è Tri des d√©chets :
- Bac jaune : recyclables
- Bac vert : ordures m√©nag√®res
- Bac bleu : verre

üíù Merci de :
- Laisser le logement dans l'√©tat o√π vous l'avez trouv√©
- Signaler tout probl√®me ou casse
- Laisser un avis sur la plateforme

Nous esp√©rons que vous avez pass√© un excellent s√©jour !`
    };
    
    const textarea = document.getElementById(`guide-${section}`);
    if (textarea && aiContent[section]) {
        textarea.value = aiContent[section];
        state.aiGeneratedCount++;
        updateDashboard();
        showToast('success', 'Contenu g√©n√©r√©', 'Le contenu a √©t√© g√©n√©r√© avec succ√®s par l\'IA');
    }
}

async function saveGuide() {
    if (!state.currentProperty) {
        showToast('error', 'Erreur', 'Veuillez s√©lectionner un logement');
        return;
    }
    
    const guide = {
        welcome: document.getElementById('guide-welcome')?.value || '',
        access: document.getElementById('guide-access')?.value || '',
        equipment: document.getElementById('guide-equipment')?.value || '',
        neighborhood: document.getElementById('guide-neighborhood')?.value || '',
        checkout: document.getElementById('guide-checkout')?.value || '',
        emergency: document.getElementById('guide-emergency')?.value || ''
    };
    
    try {
        if (window.db && state.currentUser) {
            await window.db.collection('users')
                .doc(state.currentUser.uid)
                .collection('guides')
                .doc(`${state.currentProperty.id}_${state.currentLanguage}`)
                .set({
                    propertyId: state.currentProperty.id,
                    language: state.currentLanguage,
                    content: guide,
                    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                });
        }
        
        if (!state.guides[state.currentProperty.id]) {
            state.guides[state.currentProperty.id] = {};
        }
        state.guides[state.currentProperty.id][state.currentLanguage] = guide;
        saveToLocalStorage();
        updateDashboard();
        showToast('success', 'Guide sauvegard√©', 'Le guide a √©t√© sauvegard√© avec succ√®s');
        
    } catch (error) {
        console.error('‚ùå Error saving guide:', error);
        showToast('error', 'Erreur', 'Impossible de sauvegarder le guide');
    }
}

// Toast Notifications
function showToast(type, title, message) {
    const container = document.getElementById('toast-container');
    if (!container) return;
    
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.innerHTML = `
        <span class="toast-icon">${getToastIcon(type)}</span>
        <div class="toast-content">
            <div class="toast-title">${title}</div>
            <div class="toast-message">${message}</div>
        </div>
        <span class="toast-close" onclick="this.parentElement.remove()">‚úï</span>
    `;
    
    container.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 5000);
}

function getToastIcon(type) {
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è',
        ai: 'ü§ñ'
    };
    return icons[type] || '‚ÑπÔ∏è';
}

// Local Storage
function saveToLocalStorage() {
    try {
        localStorage.setItem('luxurybot_state', JSON.stringify(state));
    } catch (error) {
        console.error('‚ùå Error saving to localStorage:', error);
    }
}

function loadFromLocalStorage() {
    try {
        const saved = localStorage.getItem('luxurybot_state');
        if (saved) {
            const loadedState = JSON.parse(saved);
            state = { ...state, ...loadedState };
        }
    } catch (error) {
        console.error('‚ùå Error loading from localStorage:', error);
    }
}

// Dashboard Updates
function updateDashboard() {
    const elements = {
        'total-properties': state.properties.length,
        'total-guides': Object.keys(state.guides).length,
        'ai-generated': state.aiGeneratedCount,
        'upcoming-checkins': 3
    };
    
    for (const [id, value] of Object.entries(elements)) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }
}

// Map Initialization
function initializeMap() {
    const mapEl = document.getElementById('property-map');
    if (mapEl) {
        mapEl.innerHTML = `
            <div style="height: 100%; display: flex; align-items: center; justify-content: center; background: #e2e8f0;">
                <div style="text-align: center;">
                    <span style="font-size: 3rem;">üó∫Ô∏è</span>
                    <p style="margin-top: 1rem; color: #718096;">Carte interactive</p>
                </div>
            </div>
        `;
    }
}

// Helper Functions
function createNewGuide() {
    if (state.properties.length === 0) {
        showToast('warning', 'Attention', 'Veuillez d\'abord ajouter un logement');
        showSection('properties');
    } else {
        showToast('info', 'Nouveau guide', 'S√©lectionnez un logement pour cr√©er le guide');
    }
}

// Integration Functions
function connectBooking() {
    showToast('info', 'Booking.com', 'Redirection vers l\'authentification Booking...');
}

function configureOpenAI() {
    const apiKey = prompt('Entrez votre cl√© API OpenAI :');
    if (apiKey) {
        localStorage.setItem('openai_api_key', apiKey);
        showToast('success', 'OpenAI configur√©', 'Votre cl√© API a √©t√© enregistr√©e');
        if (event && event.target) {
            event.target.textContent = 'Connect√©';
            event.target.classList.remove('btn-secondary');
            event.target.classList.add('btn-success');
        }
    }
}

function configureN8N() {
    showToast('info', 'n8n', 'Configuration des workflows d\'automatisation...');
}

function configureSendGrid() {
    const apiKey = prompt('Entrez votre cl√© API SendGrid :');
    if (apiKey) {
        localStorage.setItem('sendgrid_api_key', apiKey);
        showToast('success', 'SendGrid configur√©', 'Envoi d\'emails activ√©');
        if (event && event.target) {
            event.target.textContent = 'Connect√©';
            event.target.classList.remove('btn-secondary');
            event.target.classList.add('btn-success');
        }
    }
}

function configureStripe() {
    const apiKey = prompt('Entrez votre cl√© API Stripe :');
    if (apiKey) {
        localStorage.setItem('stripe_api_key', apiKey);
        showToast('success', 'Stripe configur√©', 'Paiements en ligne activ√©s');
        if (event && event.target) {
            event.target.textContent = 'Connect√©';
            event.target.classList.remove('btn-secondary');
            event.target.classList.add('btn-success');
        }
    }
}

function configureFirebase() {
    showToast('info', 'Firebase', 'Firebase est d√©j√† configur√© et connect√©');
}

function configureTwilio() {
    const accountSid = prompt('Entrez votre Account SID Twilio :');
    if (accountSid) {
        const authToken = prompt('Entrez votre Auth Token Twilio :');
        if (authToken) {
            const phoneNumber = prompt('Entrez votre num√©ro Twilio (format: +33...) :');
            if (phoneNumber) {
                localStorage.setItem('twilio_config', JSON.stringify({
                    accountSid,
                    authToken,
                    phoneNumber
                }));
                showToast('success', 'Twilio configur√©', 'SMS et appels activ√©s');
                if (event && event.target) {
                    event.target.textContent = 'Connect√©';
                    event.target.classList.remove('btn-secondary');
                    event.target.classList.add('btn-success');
                }
            }
        }
    }
}

function configureVAPI() {
    const apiKey = prompt('Entrez votre cl√© API VAPI :');
    if (apiKey) {
        localStorage.setItem('vapi_api_key', apiKey);
        showToast('success', 'VAPI configur√©', 'Assistant vocal activ√©');
        if (event && event.target) {
            event.target.textContent = 'Connect√©';
            event.target.classList.remove('btn-secondary');
            event.target.classList.add('btn-success');
        }
    }
}

// Additional Functions
function sendSMS(phoneNumber, message) {
    const config = JSON.parse(localStorage.getItem('twilio_config') || '{}');
    if (!config.accountSid) {
        showToast('error', 'Erreur', 'Twilio non configur√©');
        return;
    }
    showToast('success', 'SMS envoy√©', `Message envoy√© √† ${phoneNumber}`);
}

function startVoiceAssistant() {
    const apiKey = localStorage.getItem('vapi_api_key');
    if (!apiKey) {
        showToast('error', 'Erreur', 'VAPI non configur√©');
        return;
    }
    showToast('ai', 'Assistant vocal', 'Assistant pr√™t √† r√©pondre aux appels');
}

function previewGuide() {
    showToast('info', 'Aper√ßu', 'Fonctionnalit√© en d√©veloppement');
}

function shareGuide() {
    const shareUrl = `${window.location.origin}${window.location.pathname}?property=${state.currentProperty?.id}&lang=${state.currentLanguage}`;
    
    if (navigator.share) {
        navigator.share({
            title: `Guide ${state.currentProperty?.name}`,
            text: 'Voici le guide d\'accueil pour votre s√©jour',
            url: shareUrl
        });
    } else {
        navigator.clipboard.writeText(shareUrl);
        showToast('success', 'Lien copi√©', 'Le lien a √©t√© copi√© dans le presse-papier');
    }
}

function exportPDF() {
    showToast('info', 'Export PDF', 'Installation de jsPDF requise pour cette fonctionnalit√©');
}

function showPropertyReviews(propertyId) {
    showToast('info', 'Avis', 'Module avis en d√©veloppement');
}

function showPropertyCheckin(propertyId) {
    showToast('info', 'Check-in', 'Module check-in digital en d√©veloppement');
}

// DOM Content Loaded check
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(checkSavedIntegrations, 500);
    });
} else {
    setTimeout(checkSavedIntegrations, 500);
}

// Observer for dynamic content
const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
        if (mutation.type === 'childList') {
            const settingsSection = document.querySelector('#settings.section.active');
            if (settingsSection) {
                checkSavedIntegrations();
            }
        }
    });
});

if (document.body) {
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
}

// Global functions needed by HTML
window.toggleTheme = toggleTheme;
window.logout = logout;
window.showSection = showSection;
window.openPropertyModal = openPropertyModal;
window.closePropertyModal = closePropertyModal;
window.showImportModal = showImportModal;
window.importFromURL = importFromURL;
window.createNewGuide = createNewGuide;
window.loadPropertyGuide = loadPropertyGuide;
window.switchLanguage = switchLanguage;
window.generateAIContent = generateAIContent;
window.saveGuide = saveGuide;
window.previewGuide = previewGuide;
window.shareGuide = shareGuide;
window.exportPDF = exportPDF;
window.closeWelcomeModal = closeWelcomeModal;
window.startDemo = startDemo;
window.showRegister = showRegister;
window.closeRegisterModal = closeRegisterModal;
window.showForgotPassword = showForgotPassword;
window.updateProfile = updateProfile;
window.connectBooking = connectBooking;
window.configureOpenAI = configureOpenAI;
window.configureN8N = configureN8N;
window.configureSendGrid = configureSendGrid;
window.configureStripe = configureStripe;
window.configureFirebase = configureFirebase;
window.configureTwilio = configureTwilio;
window.configureVAPI = configureVAPI;
window.selectProperty = selectProperty;
window.showPropertyReviews = showPropertyReviews;
window.showPropertyCheckin = showPropertyCheckin;

// Log app loading
console.log('üèÅ LuxuryBot Ultimate app.js loaded - waiting for Firebase...');
